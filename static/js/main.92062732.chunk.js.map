{"version":3,"sources":["logo.svg","components/Services/ServiceConfiguration.js","components/Services/PubnubService.js","components/Helpers/NotificationServiceHelper.js","ChatClient/ChatForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","serviceConfigurations","PUBNUB","publishKey","subscribeKey","PubnubService","Object","keys","serviceConfiguration","pubnub","PubNubReact","init","component","subscribe","channel","channels","withPresence","getStatus","st","console","log","publish","message","getMessage","callBack","msg","unsubscribe","getNotificationService","ChatForm","props","sendMessage","state","chats","userName","trim","newChat","timestamp","Date","sender","service","random","senderRandom","text","channelName","setState","window","localStorage","setItem","JSON","stringify","chatHolder","refs","scroll","scrollHeight","setUsername","evt","name","nameChange","target","value","setMessage","messageInputKeyUp","keyCode","getItem","parse","Math","toString","this","prompt","location","reload","className","ref","map","chat","index","key","onKeyUp","type","placeholder","onChange","onClick","Component","App","href","class","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92062732.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","\r\nexport const activeNotificationService = \"PUBNUB\";\r\n\r\nexport const serviceConfigurations = {\r\n    PUBNUB : {\r\n        publishKey: \"pub-c-bea40ce9-2179-4866-8140-fa8942c4ef4f\",\r\n        subscribeKey: \"sub-c-7e9caa68-f1bd-11e9-bdee-36080f78eb20\"\r\n    }\r\n}\r\n\r\nexport const availableNotificationServices = Object.keys(serviceConfigurations);\r\n\r\nexport const getServiceConfiguration = (service) => {\r\n    return serviceConfigurations[service] || {};\r\n}\r\n","import PubNubReact from 'pubnub-react';\r\nimport { getServiceConfiguration } from './ServiceConfiguration';\r\n\r\nconst PubnubService = () => {\r\n    const serviceConfiguration = getServiceConfiguration(\"PUBNUB\");\r\n    const pubnub = new PubNubReact({ publishKey: serviceConfiguration.publishKey, subscribeKey: serviceConfiguration.subscribeKey });\r\n\r\n    return {\r\n        init: (component) => {\r\n            pubnub.init(component);\r\n        },\r\n        subscribe: (channel) => {\r\n            return pubnub.subscribe({ channels: [channel], withPresence: true })\r\n        },\r\n        getStatus: (channel) => {\r\n            return (st) => {\r\n                console.log(st);\r\n                pubnub.publish({ message: 'hello world from react', channel: channel });\r\n            }\r\n        },\r\n        getMessage: (channel, callBack) => {\r\n            return pubnub.getMessage(channel, (msg) => {\r\n                    callBack(msg.message);\r\n                });\r\n        },\r\n        publish: (message, channel) => {\r\n            return pubnub.publish({ message: message, channel: channel });\r\n        },\r\n        unsubscribe: (channel) => {\r\n            return pubnub.unsubscribe({ channels: [channel] });\r\n        }\r\n    }\r\n}\r\n\r\nexport default PubnubService;","import PubnubService from '../Services/PubnubService';\r\nimport { activeNotificationService } from '../Services/ServiceConfiguration';\r\n\r\nconst getNotificationService = (channel) => {\r\n    switch (activeNotificationService) {\r\n        case \"PUBNUB\":\r\n            return PubnubService(channel);\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nexport default getNotificationService;","import React, { Component } from 'react';\r\nimport getNotificationService from '../components/Helpers/NotificationServiceHelper';\r\nimport './ChatClient.css';\r\n\r\n//const channelName = \"Ria-Chat-Channel\";\r\n\r\nexport default class ChatForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name:\"\",\r\n            userName: window.localStorage.getItem('__user_name'),\r\n            channelName: window.localStorage.getItem('channel_name'),\r\n            chats: (window.localStorage.getItem('_chats') && JSON.parse(window.localStorage.getItem('_chats'))) || [],\r\n            message: \"\"\r\n        }\r\n        this.service = getNotificationService()\r\n        this.service.init(this);\r\n        this.senderRandom = (new Date() - Math.random()).toString(36);\r\n    }\r\n  \r\n    componentDidMount() {\r\n        const channelName = window.localStorage.getItem('channel_name');\r\n        if(channelName){\r\n            this.service.subscribe(channelName);\r\n            this.service.getMessage(channelName, (msg) => {\r\n                if(this.senderRandom !== msg.random){\r\n                    const newChat = [{ timestamp: new Date() - 0, sender: msg.sender, message: msg.text }];\r\n                    const { chats} = this.state;\r\n                    this.setState({chats: [...chats, ...newChat], message : \"\"});\r\n                    window.localStorage.setItem('_chats', JSON.stringify([...chats, ...newChat]));\r\n                }\r\n            });\r\n        }else{\r\n            const channel = prompt(\"Enter channel name\")\r\n            if(channel){\r\n                window.localStorage.setItem('channel_name', channel);\r\n            }\r\n            window.location.reload();\r\n        }\r\n        \r\n    }\r\n\r\n    sendMessage = () => {\r\n        const { chats, userName, message } = this.state;\r\n        if(message.trim()){\r\n            const newChat = [{ timestamp: new Date() - 0, sender: userName, message: message }];\r\n            this.service.publish({ random : this.senderRandom, sender: userName, text: message }, this.state.channelName);\r\n            this.setState({chats: [...chats, ...newChat], message : \"\"});\r\n            window.localStorage.setItem('_chats', JSON.stringify([...chats, ...newChat]));\r\n            const chatHolder = this.refs['chat-holder'];\r\n            chatHolder.scroll(0, chatHolder.scrollHeight);\r\n        }\r\n    }\r\n\r\n    setUsername = (evt) => {\r\n        this.setState({userName: this.state.name});\r\n        window.localStorage.setItem('__user_name', this.state.name);\r\n    }\r\n\r\n    nameChange = ({target}) => {\r\n        this.setState({name: target.value});\r\n    }\r\n\r\n    setMessage = (evt) => {\r\n        this.setState({message: evt.target.value});\r\n    }\r\n\r\n    messageInputKeyUp = (evt) => {\r\n        if(evt.keyCode === 13){\r\n            this.sendMessage();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.service.unsubscribe(this.state.channelName);\r\n    }\r\n  \r\n    render() {\r\n        const {chats , userName} = this.state;\r\n        if(!userName){\r\n            return(\r\n                <div>\r\n                    <label text = \"Your Name?\"/>\r\n                    <input className = 'input-text'  type='text' placeholder = 'Enter your name' onChange = {this.nameChange} />\r\n                    <input className = 'input-button'  type = 'button' value = 'Submit' onClick = {this.setUsername} />\r\n                </div>\r\n            )\r\n        }\r\n        return(\r\n            <div className = \"chat-body\">\r\n                <div className = \"chat-message-container\" ref = 'chat-holder'>\r\n                    {\r\n                        chats && \r\n                        chats.map((chat,index)=>{\r\n                            return <div key = {index}>  \r\n                                <div className = {chat.sender === this.state.userName ? \"message right\" : \"message left\"}>\r\n                                    {chat.message}\r\n                                </div>\r\n                            </div>\r\n                        })\r\n                    }\r\n                </div>\r\n                <div className = \"chat-inputs\">\r\n                    <input onKeyUp = {this.messageInputKeyUp} className = 'input-text' type='text' value = {this.state.message} placeholder = 'Type of message' onChange = {this.setMessage} />\r\n                    <input className = 'input-button' type = 'button' value = \"Send\" onClick = {this.sendMessage} />\r\n                </div>\r\n            </div>\r\n        )\r\n  }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ChatForm from './ChatClient/ChatForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <div className = 'header'>\n        <a href=\"#\" className=\"logo\">Ria Chat</a>\n        <div class=\"header-right\">\n          <a class=\"active\" href=\"#\">10-11-12</a>\n        </div>\n      </div>\n      <ChatForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}